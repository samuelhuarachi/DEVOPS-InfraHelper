https://git-school.github.io/visualizing-git/

git log --decorate --oneline --graph --all

git config submodule.recurse true

git pull --recurse-submodules

git reset --hard HEAD~1 => para dar um restore no último commit

git checkout -b new_branch

git log --oneline

q => para sair do git log

git revert [sha1 code] => para reverter determinado commit

git diff

git branch -D [branch name]

git push [remote] [branch name] => enviar atualizações

git fetch => "puxa" as novas branchs do repositori para sua maquina
git remote update => se o checkout nao fncionar,  e nem o fetch, faz esse depois o fetch denovo, e dpoeis o checkout
git pull => sincroniza a branch atual o repositorio

git switch [nome da branch em remoto] => puxa uma branch do remote para local

git tag <tag name>
git tag v1.5.1
git tag -a v1.1.1 -m "bug fix"
git show v1.1
git tag -l "v1.*"
git push prod v1.5.1
git tag -d v1.5.0
git push prod -d v1.5.1
git tag <tag name> <reference of commit>
git tag v1.2 5fcdb03

#########################
If you want to merge project-a into project-b:

cd path/to/project-b
git remote add project-a /path/to/project-a
git fetch project-a --tags
git merge --allow-unrelated-histories project-a/master # or whichever branch you want to merge
git remote remove project-a
#########################

git pull remote-dev master --allow-unrelated-histories => esse comando atualizou o meu repo de prod, com varios conflitos
git restore . => restore de todos os arquivos que nao foram para stage
git merge --abort


git pull -X theirs remote-dev master --allow-unrelated-histories --prune => esse daqui mergea bonito o de producao com a master


git branch | grep -v "master" | xargs git branch -D => remove todas as branchs diferente de master


============================================= acho que posso jogar fora isso
git pull -X theirs 'remote-dev/TestMoveFolders' --allow-unrelated-histories --prune
git pull -X theirs remote-dev master --prune
git merge -X theirs --allow-unrelated-histories remote-dev/TestMoveFolders
git merge -s resolve --allow-unrelated-histories remote-dev/TestMoveFolders
git fetch remote-dev master; git merge -X theirs --allow-unrelated-histories FETCH_HEAD
git clean -f
git merge remote-dev/TestMoveFolders -X theirs --allow-unrelated-histories
======================================================


git merge -s subtree --allow-unrelated-histories remote-dev/TestMoveFolders => pareceu funcionar




git pull -s subtree remote-dev TestMoveFolders --allow-unrelated-histories 

git push prod  --tags

***********************************
achar conflitos
git grep '<<<<<<< HEAD'

ou 

procurar por
<< HEAD
>>>>>>> dev
***********************************




